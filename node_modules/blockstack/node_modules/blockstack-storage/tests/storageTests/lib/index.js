'use strict';

var _mockLocalstorage = require('mock-localstorage');

var _mockLocalstorage2 = _interopRequireDefault(_mockLocalstorage);

var _testlib = require('./testlib');

var _lib = require('../../../lib/');

var _blockstack = require('blockstack');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

global.localStorage = new _mockLocalstorage2.default();

var assert = require('assert');
var bitcoinjs = require('bitcoinjs-lib');
var http = require('http');
var jsontokens = require('jsontokens');
var BigInteger = require('bigi');
var Promise = require('promise');

var args = process.argv.slice(2);
var command = null;
if (args.length == 0) {
   command = "unittest";
} else {
   command = args[0];
}

var res = null;

function dir_expect(dir, names) {
   var _iteratorNormalCompletion = true;
   var _didIteratorError = false;
   var _iteratorError = undefined;

   try {
      for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
         var name = _step.value;

         if (!Object.keys(dir['children']).includes(name)) {
            return false;
         }
      }
   } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
   } finally {
      try {
         if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
         }
      } finally {
         if (_didIteratorError) {
            throw _iteratorError;
         }
      }
   }

   return true;
}

function dir_absent(ds_str, dir_path) {
   return (0, _testlib.datastoreListdir)(ds_str, dir_path).then(function (idata) {
      console.log('listdir ' + dir_path + ' got result: ' + JSON.stringify(idata));
      return false;
   }, function (error) {
      console.log('listdir ' + dir_path + ' failed');
      console.log(error);
      console.log(JSON.stringify(error));
      return true;
   });
}

function stat_dir(ds_str, dir_path, expect_error) {
   return (0, _testlib.datastoreStat)(ds_str, dir_path).then(function (inode) {
      console.log('stat dir ' + dir_path + ' got result: ' + JSON.stringify(inode));
      assert(inode);
      assert(!inode.error);
      assert(!inode.errno);
      if (inode.type != 2) {
         console.log(inode);
         return false;
      }

      return true;
   }, function (error) {
      console.log('stat ' + dir_path + ' failed');
      console.log(error);
      console.log(JSON.stringify(error));
      if (expect_error) {
         return true;
      } else {
         return false;
      }
   });
}

function stat_file(ds_str, file_path, expect_error) {
   return (0, _testlib.datastoreStat)(ds_str, file_path).then(function (inode) {
      console.log('stat file ' + file_path + ' got result: ' + JSON.stringify(inode));
      assert(inode);
      assert(!inode.error);
      assert(!inode.errno);
      if (inode.type != 1) {
         console.log(inode);
         return false;
      }

      return true;
   }, function (error) {
      console.log('stat ' + file_path + ' failed');
      console.log(error);
      console.log(JSON.stringify(error));

      if (expect_error) {
         return true;
      } else {
         return false;
      }
   });
}

function file_expect(ds_str, file_path, content) {
   return (0, _testlib.datastoreGetFile)(ds_str, file_path).then(function (idata) {
      console.log('getfile ' + file_path + ' got result: ' + JSON.stringify(idata));
      if (idata.error || !idata) {
         if (expect_error) {
            return true;
         } else {
            console.log(idata.error);
            return false;
         }
      }

      if (idata != content) {
         console.log('expected ' + content + '; got ' + idata);
      }

      return true;
   }, function (error) {
      console.log('getfile ' + file_path + ' failed');
      console.log(error);
      console.log(JSON.stringify(error));
      return false;
   });
}

function file_absent(ds_str, file_path) {
   return (0, _testlib.datastoreGetFile)(ds_str, file_path).then(function (idata) {
      console.log('getfile ' + file_path + ' got result: ' + JSON.stringify(idata));
      if (idata) {
         return false;
      } else {
         return true;
      }
   }, function (error) {
      console.log('getfile ' + file_path + ' failed');
      console.log(error);
      console.log(JSON.stringify(error));
      return false;
   });
}

function http_request(options) {

   var p = new Promise(function (resolve, reject) {
      http.request(options, function (response) {
         var strbuf = [];
         response.on('data', function (chunk) {
            strbuf.push(chunk);
         });

         response.on('end', function () {
            if (response.statusCode != 200) {
               return reject("HTTP Status " + response.statusCode);
            }

            var str = Buffer.concat(strbuf).toString();
            var resp = JSON.parse(str);
            str = null;
            strbuf = null;

            resolve(resp);
         });

         response.on('error', function () {
            reject(resp);
         });
      }).end();
   });
   return p;
}

function node_ping(host, port) {
   var options = {
      'method': 'GET',
      'host': host,
      'port': port,
      'path': '/v1/node/ping'
   };

   return http_request(options);
}

if (command == 'createDatastore') {
   assert(args.length >= 5);
   res = (0, _testlib.createDatastore)(args[1], args[2], args[3], args[4], args[5]);
} else if (command == 'deleteDatastore') {
   assert(args.length >= 2);
   res = (0, _testlib.deleteDatastore)(args[1]);
} else if (command == 'getDatastore') {
   assert(args.length >= 5);
   res = (0, _testlib.getDatastore)(args[1], args[2], args[3], args[4]);
} else if (command == 'mkdir') {
   assert(args.length >= 3);
   res = (0, _testlib.datastoreMkdir)(args[1], args[2], args[3], args[4]);
} else if (command == 'rmdir') {
   assert(args.length >= 3);
   res = (0, _testlib.datastoreRmdir)(args[1], args[2], args[3], args[4]);
} else if (command == 'listdir') {
   assert(args.length >= 3);
   res = (0, _testlib.datastoreListdir)(args[1], args[2], args[3], args[4]);
} else if (command == 'getfile') {
   assert(args.length >= 3);
   res = (0, _testlib.datastoreGetFile)(args[1], args[2], args[3], args[4]);
} else if (command == 'putfile') {
   assert(args.length >= 4);
   res = (0, _testlib.datastorePutFile)(args[1], args[2], args[3], args[4], args[5]);
} else if (command == 'deletefile') {
   assert(args.length >= 3);
   res = (0, _testlib.datastoreDeleteFile)(args[1], args[2]);
} else if (command == 'stat') {
   assert(args.length >= 3);
   res = (0, _testlib.datastoreStat)(args[1], args[2]);
} else if (command == 'unittest') {
   var hdr = (0, _lib.makeInodeHeaderBlob)("1BjnYXfXbh84Xrc24zM1GFvCrXenp8AqUZ", 2, "1BjnYXfXbh84Xrc24zM1GFvCrXenp8AqUZ", "86ce29a7-0714-4136-bfbc-d48f2e55afd4", "9ceb6a079746a67defdadd7ad19a4c9e070a7e5dd2d41df9fc6e3d289e8e49c4", "c429b777-c7b9-4e07-99ba-7cdf98a283c3", 1);

   var api_password = "blockstack_integration_test_api_password";
   var device_id = 'c429b777-c7b9-4e07-99ba-7cdf98a283c3';
   var datastore_privkey = bitcoinjs.ECPair.makeRandom();
   var datastore_privkey_hex = datastore_privkey.d.toBuffer().toString('hex');
   var datastore_pubkey_hex = datastore_privkey.getPublicKeyBuffer().toString('hex');
   var datastore_id = (0, _lib.datastoreGetId)(datastore_pubkey_hex);
   var res = null;
   var datastore = null;
   var datastore_str = null;
   var session_token = null;

   console.log('private key is ' + datastore_privkey_hex);
   console.log('public key is ' + datastore_pubkey_hex);
   console.log("begin ping");

   node_ping('localhost', 16268).then(function (res) {

      console.log('ping result: ' + JSON.stringify(res));

      var auth_request = (0, _blockstack.makeAuthRequest)(datastore_privkey_hex, "https://www.foo.com/login", "https://www.foo.com/manifest.json", ['store_read', 'store_write', 'store_admin'], "https://www.foo.com");
      return (0, _blockstack.getCoreSession)('localhost', 16268, api_password, datastore_privkey_hex, "judecn.id", auth_request);
   }, function (error) {
      console.log(JSON.stringify(error));process.exit(1);
   }).then(function (token_res) {

      console.log('session result: ' + JSON.stringify(token_res));
      session_token = token_res;
      if (!session_token) {
         console.log("failed to authenticate");
         process.exit(1);
      }

      return (0, _testlib.getOrCreateDatastore)({ 'local': 1 }, session_token, datastore_privkey_hex);
   }, function (error) {
      console.log("get session token failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('getOrCreateDatastore (create) result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         process.exit(1);
      }

      // make sure it's idempotent
      return (0, _testlib.getOrCreateDatastore)({ 'local': 1 }, session_token, datastore_privkey_hex);
   }, function (error) {
      console.log("getOrCreateDatastore (create) failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('getOrCreateDatastore (get) result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         console.log("exiting");
         process.exit(1);
      }

      datastore = res.datastore;
      datastore_str = JSON.stringify(res);

      return (0, _testlib.datastoreMkdir)(datastore_str, '/dir1');
   }, function (error) {
      console.log("getOrCreateDatastore (get) failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastoreMkdir result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         console.log(JSON.stringify(res.error));
         console.log("exiting");
         process.exit(1);
      }

      return (0, _testlib.datastoreMkdir)(datastore_str, '/dir1/dir2');
   }, function (error) {
      console.log("mkdir /dir1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastoreMkdir result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         process.exit(1);
      }

      return (0, _testlib.datastorePutFile)(datastore_str, '/file1', "hello world");
   }, function (error) {
      console.log("mkdir /dir1/dir2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastorePutFile result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         process.exit(1);
      }

      return (0, _testlib.datastorePutFile)(datastore_str, '/dir1/file2', "hello world 2");
   }, function (error) {
      console.log("putfile /file1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastorePutFile result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         process.exit(1);
      }

      return (0, _testlib.datastorePutFile)(datastore_str, '/dir1/dir2/file3', 'hello world 3');
   }, function (error) {
      console.log("putfile /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastorePutFile result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         process.exit(1);
      }

      return (0, _testlib.datastoreListdir)(datastore_str, '/');
   }, function (error) {
      console.log("putfile /dir1/dir2/file3 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastoreListdir result: ' + JSON.stringify(res));
      if (!res || res.error) {
         console.log(res);
         process.exit(1);
      }

      if (!dir_expect(res, ['dir1', 'file1'])) {
         console.log("Missing dir1 or file1");
         console.log(res);
         process.exit(1);
      }

      return (0, _testlib.datastoreListdir)(datastore_str, '/dir1');
   }, function (error) {
      console.log("listdir / failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('datastoreListdir result: ' + JSON.stringify(res));
      if (!res || res.error) {
         console.log(res);
         process.exit(1);
      }

      if (!dir_expect(res, ['dir2', 'file2'])) {
         console.log("Missing dir2 or file2");
         console.log(res);
         process.exit(1);
      }

      return stat_dir(datastore_str, '/');
   }, function (error) {
      console.log("listdir /dir1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_dir result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return stat_dir(datastore_str, '/dir1');
   }, function (error) {
      console.log("stat dir / failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_dir result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return stat_dir(datastore_str, '/dir1/dir2');
   }, function (error) {
      console.log("stat dir /dir1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_dir result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return stat_file(datastore_str, '/file1');
   }, function (error) {
      console.log("stat dir /dir1/dir2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_file result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return stat_file(datastore_str, '/dir1/file2');
   }, function (error) {
      console.log("stat file /file1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_file result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return stat_file(datastore_str, '/dir1/dir2/file3');
   }, function (error) {
      console.log("stat file /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_file result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return file_expect(datastore_str, '/file1', 'hello world');
   }, function (error) {
      console.log("stat file /dir1/dir2/file3 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('file_expect result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return file_expect(datastore_str, '/dir1/file2', 'hello world 2');
   }, function (error) {
      console.log("get file /file1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('file_expect result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      return file_expect(datastore_str, '/dir1/dir2/file3', 'hello world 3');
   }, function (error) {
      console.log("get file /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('file_expect result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return (0, _testlib.datastoreDeleteFile)(datastore_str, '/file1');
   }, function (error) {
      console.log("get file /dir1/dir2/file3 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('deletefile result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return (0, _testlib.datastoreDeleteFile)(datastore_str, '/dir1/file2');
   }, function (error) {
      console.log("delete file /file1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('deletefile result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return (0, _testlib.datastoreDeleteFile)(datastore_str, '/dir1/dir2/file3');
   }, function (error) {
      console.log("delete file /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('deletefile result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return stat_file(datastore_str, '/file1', true);
   }, function (error) {
      console.log("delete file /dir1/dir2/file3 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_file result (expect failure): ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return stat_file(datastore_str, '/dir1/file2', true);
   }, function (error) {
      console.log("stat /file1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_file result (expect failure): ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return stat_file(datastore_str, '/dir1/dir2/file3', true);
   }, function (error) {
      console.log("stat file /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_file result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return file_absent(datastore_str, '/file1');
   }, function (error) {
      console.log("stat file /dir1/dir2/file3 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('file_absent result (expect failure): ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return file_absent(datastore_str, '/dir1/file2');
   }, function (error) {
      console.log("getFile /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('file_absent result (expect failure): ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return file_absent(datastore_str, '/dir1/dir2/file3', true);
   }, function (error) {
      console.log("getFile /dir1/file2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('file_absent result (expect failure): ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return (0, _testlib.datastoreRmdir)(datastore_str, '/dir1/dir2');
   }, function (error) {
      console.log("getFile /dir1/dir2/file3 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('rmdir result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return (0, _testlib.datastoreRmdir)(datastore_str, '/dir1');
   }, function (error) {
      console.log("rmdir /dir1/dir2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('rmdir result: ' + JSON.stringify(res));
      if (res.error) {
         console.log(res);
         process.exit(1);
      }

      return dir_absent(datastore_str, '/dir1/dir2');
   }, function (error) {
      console.log("rmdir /dir1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('dir_absent result: ' + JSON.stringify(res));
      if (!res || res.error) {
         console.log(res);
         process.exit(1);
      }

      return dir_absent(datastore_str, '/dir1');
   }, function (error) {
      console.log("listdir /dir1/dir2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('dir_absent result: ' + JSON.stringify(res));
      if (!res || res.error) {
         console.log(res);
         process.exit(1);
      }

      return stat_dir(datastore_str, '/dir1', true);
   }, function (error) {
      console.log("listdir /dir1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_dir result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }
      return stat_dir(datastore_str, '/dir1/dir2', true);
   }, function (error) {
      console.log("stat dir /dir1 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('stat_dir result: ' + JSON.stringify(res));
      if (!res || res.error) {
         process.exit(1);
      }

      return (0, _testlib.deleteDatastore)(datastore_str);
   }, function (error) {
      console.log("stat dir /dir1/dir2 failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   }).then(function (res) {

      console.log('delete datastore result: ' + JSON.stringify(res));
      if (!res) {
         process.exit(1);
      }
      process.exit(0);
   }, function (error) {
      console.log("delete datastore failed:");console.log(error);console.log(JSON.stringify(error));process.exit(1);
   });
} else {
   console.log("No command given");
   console.log('args = ' + args);
   console.log('command = ' + command);
   assert(0);
}