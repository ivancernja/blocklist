'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});
exports.json_stable_serialize_tests = json_stable_serialize_tests;

var _util = require('../util');

var _tape = require('tape');

var _tape2 = _interopRequireDefault(_tape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Check object equality recursive.
 * Works only for objects composed of primitive types.
 * sourced from http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html
 */
function objeq(a, b) {
   if (a == b) {
      return true;
   }

   var aProps = Object.getOwnPropertyNames(a);
   var bProps = Object.getOwnPropertyNames(b);

   if (aProps.length != bProps.length) {
      return false;
   }

   for (var i = 0; i < aProps.length; i++) {
      var propName = aProps[i];
      if (!objeq(a[propName], b[propName])) {
         return false;
      }
   }

   return true;
}

function json_stable_serialize_tests() {

   var serializable_objects = ['', 1, true, 'hello', [], [1, 2], {}, { 'a': 'b' }, { 'a': 1, 'b': '2' }, ['1', '2', '3'], [1, 2, 3], [{ 'a': 'b' }, { 'c': 'd' }], [{ 'a': [1, 2, 3], 'b': [4, 5, 6] }], { 'c': [{ 'a': 1, 'c': 2, 'b': 3 }, { 'f': 4, 'e': 5, 'd': 6 }], 'a': [4, 1, 2, 3, '4', '5', '6'], 'd': true, 'b': 'false' }];

   (0, _tape2.default)('serialize and deserialize JSON', function (t) {
      t.plan(serializable_objects.length);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
         for (var _iterator = serializable_objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var serializable_obj = _step.value;

            console.log('object: ' + serializable_obj);

            var jsonstr = (0, _util.jsonStableSerialize)(serializable_obj);
            console.log('jsonstr: ' + jsonstr);

            var reloaded_obj = JSON.parse(jsonstr);
            console.log('reload: ' + reloaded_obj);

            t.ok(objeq(reloaded_obj, serializable_obj), 'deserialized serialized object must equal the original object');
         }
      } catch (err) {
         _didIteratorError = true;
         _iteratorError = err;
      } finally {
         try {
            if (!_iteratorNormalCompletion && _iterator.return) {
               _iterator.return();
            }
         } finally {
            if (_didIteratorError) {
               throw _iteratorError;
            }
         }
      }
   });
}