'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFile = getFile;
exports.putFile = putFile;

var _blockstackStorage = require('blockstack-storage');

var _encryption = require('../encryption');

var _auth = require('../auth');

var _keys = require('../keys');

/**
 * Retrieves the specified file from the app's data store.
 * @param {String} path - the path to the file to read
 * @param {Boolean} decrypt - try to decrypt the data with the app private key
 * @returns {Promise} that resolves to the raw data in the file
 * or rejects with an error
 */
function getFile(path) {
  var decrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  return (0, _blockstackStorage.getFile)(path).then(function (storedContents) {
    if (decrypt) {
      var privateKey = (0, _auth.loadUserData)().appPrivateKey;
      var cipherObject = JSON.parse(storedContents);
      return (0, _encryption.decryptECIES)(privateKey, cipherObject);
    } else {
      return storedContents;
    }
  });
}

/**
 * Stores the data provided in the app's data store to to the file specified.
 * @param {String} path - the path to store the data in
 * @param {String|Buffer} content - the data to store in the file
 * @param {Boolean} encrypt - encrypt the data with the app private key
 * @return {Promise} that resolves if the operation succeed and rejects
 * if it failed
 */
function putFile(path, content) {
  var encrypt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (encrypt) {
    var privateKey = (0, _auth.loadUserData)().appPrivateKey;
    var publicKey = (0, _keys.getPublicKeyFromPrivate)(privateKey);
    var cipherObject = (0, _encryption.encryptECIES)(publicKey, content);
    content = JSON.stringify(cipherObject);
  }
  return (0, _blockstackStorage.putFile)(path, content);
}